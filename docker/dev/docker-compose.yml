services:
  node:
    image: syniol_node:22
    build:
      context: ../..
      dockerfile: docker/dev/node/Dockerfile
    container_name: nestjs_node
    tty: true
    restart: unless-stopped
    working_dir: /var/local/app
    secrets:
      - crypto_secret_key
    ports:
      - 8080:8080
    volumes:
      - ../../app:/var/local/app
    environment:
      NODE_ENV: development
      TSC_WATCHFILE: PriorityPollingInterval
      PORT: 8080
      POSTGRES_HOST: postgres
      POSTGRES_USER: root
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: nestjs-postgres-db
      CRYPTO_SECRET_KEY: ${CRYPTO_SECRET_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - syniol_nestjs_oauth

  postgres:
    image: syniol_postgres:latest
    build:
      context: ../..
      dockerfile: docker/dev/postgres/Dockerfile
    container_name: nestjs_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: nestjs-postgres-db
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_PASSWORD}'" ]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - syniol_nestjs_oauth

  redis:
    image: syniol_redis:latest
    build:
      context: ../..
      dockerfile: docker/dev/redis/Dockerfile
    container_name: nestjs_redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis_data:/data
    networks:
      - syniol_nestjs_oauth

volumes:
  postgres_data:
  redis_data:

networks:
  syniol_nestjs_oauth:
    driver: bridge
